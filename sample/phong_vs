;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; V                        0   xyzw        0     NONE   float       
; N                        0   xyzw        1     NONE   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; V                        0   xyzw        1     NONE   float   xyzw
; N                        0   xyzw        2     NONE   float   xyzw
;
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; V                        0                              
; N                        0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; V                        0                 linear       
; N                        0                 linear       
;
; Buffer Definitions:
;
; cbuffer cb
; {
;
;   struct dx.alignment.legacy.cb
;   {
;
;       column_major float4x4 mvp;                    ; Offset:    0
;       float4 cam;                                   ; Offset:   64
;       float4 obj_color;                             ; Offset:   80
;       float4 light_pos;                             ; Offset:   96
;       float4 light_color;                           ; Offset:  112
;   
;   } cb                                              ; Offset:    0 Size:   128
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; cb                                cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 12
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 3 }
;   output 1 depends on inputs: { 0, 1, 2, 3 }
;   output 2 depends on inputs: { 0, 1, 2, 3 }
;   output 3 depends on inputs: { 0, 1, 2, 3 }
;   output 4 depends on inputs: { 0 }
;   output 5 depends on inputs: { 1 }
;   output 6 depends on inputs: { 2 }
;   output 7 depends on inputs: { 3 }
;   output 8 depends on inputs: { 4 }
;   output 9 depends on inputs: { 5 }
;   output 10 depends on inputs: { 6 }
;   output 11 depends on inputs: { 7 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.alignment.legacy.cb = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <4 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%struct.PSInput = type { <4 x float>, <4 x float>, <4 x float> }
%cb = type { %class.matrix.float.4.4, <4 x float>, <4 x float>, <4 x float>, <4 x float> }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }

@cb_legacy = external global %dx.alignment.legacy.cb

define void @VSMain() {
  %cb_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %10 = extractvalue %dx.types.CBufRet.f32 %9, 0
  %11 = extractvalue %dx.types.CBufRet.f32 %9, 1
  %12 = extractvalue %dx.types.CBufRet.f32 %9, 2
  %13 = extractvalue %dx.types.CBufRet.f32 %9, 3
  %14 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %15 = extractvalue %dx.types.CBufRet.f32 %14, 0
  %16 = extractvalue %dx.types.CBufRet.f32 %14, 1
  %17 = extractvalue %dx.types.CBufRet.f32 %14, 2
  %18 = extractvalue %dx.types.CBufRet.f32 %14, 3
  %19 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.f32 %19, 0
  %21 = extractvalue %dx.types.CBufRet.f32 %19, 1
  %22 = extractvalue %dx.types.CBufRet.f32 %19, 2
  %23 = extractvalue %dx.types.CBufRet.f32 %19, 3
  %24 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.f32 %24, 0
  %26 = extractvalue %dx.types.CBufRet.f32 %24, 1
  %27 = extractvalue %dx.types.CBufRet.f32 %24, 2
  %28 = extractvalue %dx.types.CBufRet.f32 %24, 3
  %29 = fmul fast float %10, %5
  %FMad11 = call float @dx.op.tertiary.f32(i32 46, float %15, float %6, float %29)  ; FMad(a,b,c)
  %FMad10 = call float @dx.op.tertiary.f32(i32 46, float %20, float %7, float %FMad11)  ; FMad(a,b,c)
  %FMad9 = call float @dx.op.tertiary.f32(i32 46, float %25, float %8, float %FMad10)  ; FMad(a,b,c)
  %30 = fmul fast float %11, %5
  %FMad8 = call float @dx.op.tertiary.f32(i32 46, float %16, float %6, float %30)  ; FMad(a,b,c)
  %FMad7 = call float @dx.op.tertiary.f32(i32 46, float %21, float %7, float %FMad8)  ; FMad(a,b,c)
  %FMad6 = call float @dx.op.tertiary.f32(i32 46, float %26, float %8, float %FMad7)  ; FMad(a,b,c)
  %31 = fmul fast float %12, %5
  %FMad5 = call float @dx.op.tertiary.f32(i32 46, float %17, float %6, float %31)  ; FMad(a,b,c)
  %FMad4 = call float @dx.op.tertiary.f32(i32 46, float %22, float %7, float %FMad5)  ; FMad(a,b,c)
  %FMad3 = call float @dx.op.tertiary.f32(i32 46, float %27, float %8, float %FMad4)  ; FMad(a,b,c)
  %32 = fmul fast float %13, %5
  %FMad2 = call float @dx.op.tertiary.f32(i32 46, float %18, float %6, float %32)  ; FMad(a,b,c)
  %FMad1 = call float @dx.op.tertiary.f32(i32 46, float %23, float %7, float %FMad2)  ; FMad(a,b,c)
  %FMad = call float @dx.op.tertiary.f32(i32 46, float %28, float %8, float %FMad1)  ; FMad(a,b,c)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %FMad9)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %FMad6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %FMad3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %FMad)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %2)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %4)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!7, !19}
!dx.viewIdState = !{!23}
!dx.entryPoints = !{!24}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 4}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %dx.alignment.legacy.cb* undef, !"cb", i32 0, i32 0, i32 1, i32 128, null}
!7 = !{i32 0, %struct.PSInput undef, !8, %cb undef, !12, %dx.alignment.legacy.cb undef, !12}
!8 = !{i32 48, !9, !10, !11}
!9 = !{i32 6, !"p", i32 3, i32 0, i32 4, !"SV_POSITION", i32 7, i32 9}
!10 = !{i32 6, !"v", i32 3, i32 16, i32 4, !"V", i32 7, i32 9}
!11 = !{i32 6, !"n", i32 3, i32 32, i32 4, !"N", i32 7, i32 9}
!12 = !{i32 128, !13, !15, !16, !17, !18}
!13 = !{i32 6, !"mvp", i32 2, !14, i32 3, i32 0, i32 7, i32 9}
!14 = !{i32 4, i32 4, i32 2}
!15 = !{i32 6, !"cam", i32 3, i32 64, i32 7, i32 9}
!16 = !{i32 6, !"obj_color", i32 3, i32 80, i32 7, i32 9}
!17 = !{i32 6, !"light_pos", i32 3, i32 96, i32 7, i32 9}
!18 = !{i32 6, !"light_color", i32 3, i32 112, i32 7, i32 9}
!19 = !{i32 1, void ()* @VSMain, !20}
!20 = !{!21}
!21 = !{i32 0, !22, !22}
!22 = !{}
!23 = !{[10 x i32] [i32 8, i32 12, i32 31, i32 47, i32 79, i32 143, i32 256, i32 512, i32 1024, i32 2048]}
!24 = !{void ()* @VSMain, !"VSMain", !25, !4, null}
!25 = !{!26, !30, null}
!26 = !{!27, !29}
!27 = !{i32 0, !"V", i8 9, i8 0, !28, i8 0, i32 1, i8 4, i32 0, i8 0, null}
!28 = !{i32 0}
!29 = !{i32 1, !"N", i8 9, i8 0, !28, i8 0, i32 1, i8 4, i32 1, i8 0, null}
!30 = !{!31, !32, !33}
!31 = !{i32 0, !"SV_Position", i8 9, i8 3, !28, i8 4, i32 1, i8 4, i32 0, i8 0, null}
!32 = !{i32 1, !"V", i8 9, i8 0, !28, i8 2, i32 1, i8 4, i32 1, i8 0, null}
!33 = !{i32 2, !"N", i8 9, i8 0, !28, i8 2, i32 1, i8 4, i32 2, i8 0, null}
