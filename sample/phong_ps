;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float       
; V                        0   xyzw        1     NONE   float       
; N                        0   xyzw        2     NONE   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; V                        0                 linear       
; N                        0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer cb
; {
;
;   struct dx.alignment.legacy.cb
;   {
;
;       column_major float4x4 mvp;                    ; Offset:    0
;       float4 cam;                                   ; Offset:   64
;       float4 obj_color;                             ; Offset:   80
;       float4 light_pos;                             ; Offset:   96
;       float4 light_color;                           ; Offset:  112
;   
;   } cb                                              ; Offset:    0 Size:   128
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; cb                                cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 7, 8, 9, 10 }
;   output 1 depends on inputs: { 4, 5, 6, 7, 8, 9, 10 }
;   output 2 depends on inputs: { 4, 5, 6, 7, 8, 9, 10 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.alignment.legacy.cb = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <4 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%struct.PSInput = type { <4 x float>, <4 x float>, <4 x float> }
%cb = type { %class.matrix.float.4.4, <4 x float>, <4 x float>, <4 x float>, <4 x float> }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }

@cb_legacy = external global %dx.alignment.legacy.cb

define void @PSMain() {
  %cb_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %9 = extractvalue %dx.types.CBufRet.f32 %8, 0
  %10 = extractvalue %dx.types.CBufRet.f32 %8, 1
  %11 = extractvalue %dx.types.CBufRet.f32 %8, 2
  %12 = extractvalue %dx.types.CBufRet.f32 %8, 3
  %.i0 = fsub fast float %9, %4
  %.i1 = fsub fast float %10, %5
  %.i2 = fsub fast float %11, %6
  %.i3 = fsub fast float %12, %7
  %13 = call float @dx.op.dot4.f32(i32 56, float %.i0, float %.i1, float %.i2, float %.i3, float %.i0, float %.i1, float %.i2, float %.i3)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %Rsqrt = call float @dx.op.unary.f32(i32 25, float %13)  ; Rsqrt(value)
  %.i03 = fmul fast float %.i0, %Rsqrt
  %.i14 = fmul fast float %.i1, %Rsqrt
  %.i25 = fmul fast float %.i2, %Rsqrt
  %14 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %15 = extractvalue %dx.types.CBufRet.f32 %14, 0
  %16 = extractvalue %dx.types.CBufRet.f32 %14, 1
  %17 = extractvalue %dx.types.CBufRet.f32 %14, 2
  %18 = call float @dx.op.dot3.f32(i32 55, float %1, float %2, float %3, float %.i03, float %.i14, float %.i25)  ; Dot3(ax,ay,az,bx,by,bz)
  %FMax = call float @dx.op.binary.f32(i32 35, float %18, float 0.000000e+00)  ; FMax(a,b)
  %19 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.f32 %19, 0
  %21 = extractvalue %dx.types.CBufRet.f32 %19, 1
  %22 = extractvalue %dx.types.CBufRet.f32 %19, 2
  %23 = extractvalue %dx.types.CBufRet.f32 %19, 3
  %.i015 = fsub fast float %20, %4
  %.i116 = fsub fast float %21, %5
  %.i217 = fsub fast float %22, %6
  %.i318 = fsub fast float %23, %7
  %24 = call float @dx.op.dot4.f32(i32 56, float %.i015, float %.i116, float %.i217, float %.i318, float %.i015, float %.i116, float %.i217, float %.i318)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %Rsqrt1 = call float @dx.op.unary.f32(i32 25, float %24)  ; Rsqrt(value)
  %.i019 = fmul fast float %.i015, %Rsqrt1
  %.i120 = fmul fast float %.i116, %Rsqrt1
  %.i221 = fmul fast float %.i217, %Rsqrt1
  %.i023 = fsub fast float -0.000000e+00, %.i03
  %.i124 = fsub fast float -0.000000e+00, %.i14
  %.i225 = fsub fast float -0.000000e+00, %.i25
  %25 = call float @dx.op.dot3.f32(i32 55, float %.i023, float %.i124, float %.i225, float %1, float %2, float %3)  ; Dot3(ax,ay,az,bx,by,bz)
  %26 = fmul fast float %25, 2.000000e+00
  %.i026 = fmul fast float %26, %1
  %.i127 = fmul fast float %26, %2
  %.i228 = fmul fast float %26, %3
  %.i029 = fsub fast float %.i023, %.i026
  %.i130 = fsub fast float %.i124, %.i127
  %.i231 = fsub fast float %.i225, %.i228
  %27 = call float @dx.op.dot3.f32(i32 55, float %.i019, float %.i120, float %.i221, float %.i029, float %.i130, float %.i231)  ; Dot3(ax,ay,az,bx,by,bz)
  %FMax2 = call float @dx.op.binary.f32(i32 35, float %27, float 0.000000e+00)  ; FMax(a,b)
  %Log = call float @dx.op.unary.f32(i32 23, float %FMax2)  ; Log(value)
  %28 = fmul fast float %Log, 3.200000e+01
  %Exp = call float @dx.op.unary.f32(i32 21, float %28)  ; Exp(value)
  %29 = fmul fast float %Exp, 5.000000e-01
  %30 = fadd fast float %FMax, 0x3FB99999A0000000
  %31 = fadd fast float %FMax, 0x3FB99999A0000000
  %32 = fadd fast float %FMax, 0x3FB99999A0000000
  %33 = fadd fast float %30, %29
  %34 = fmul fast float %15, %33
  %35 = fadd fast float %31, %29
  %36 = fmul fast float %16, %35
  %37 = fadd fast float %32, %29
  %38 = fmul fast float %17, %37
  %39 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.f32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.f32 %39, 1
  %42 = extractvalue %dx.types.CBufRet.f32 %39, 2
  %.i042 = fmul fast float %34, %40
  %.i143 = fmul fast float %36, %41
  %.i244 = fmul fast float %38, %42
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %.i042)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %.i143)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %.i244)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!7, !19}
!dx.viewIdState = !{!23}
!dx.entryPoints = !{!24}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 4}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %dx.alignment.legacy.cb* undef, !"cb", i32 0, i32 0, i32 1, i32 128, null}
!7 = !{i32 0, %struct.PSInput undef, !8, %cb undef, !12, %dx.alignment.legacy.cb undef, !12}
!8 = !{i32 48, !9, !10, !11}
!9 = !{i32 6, !"p", i32 3, i32 0, i32 4, !"SV_POSITION", i32 7, i32 9}
!10 = !{i32 6, !"v", i32 3, i32 16, i32 4, !"V", i32 7, i32 9}
!11 = !{i32 6, !"n", i32 3, i32 32, i32 4, !"N", i32 7, i32 9}
!12 = !{i32 128, !13, !15, !16, !17, !18}
!13 = !{i32 6, !"mvp", i32 2, !14, i32 3, i32 0, i32 7, i32 9}
!14 = !{i32 4, i32 4, i32 2}
!15 = !{i32 6, !"cam", i32 3, i32 64, i32 7, i32 9}
!16 = !{i32 6, !"obj_color", i32 3, i32 80, i32 7, i32 9}
!17 = !{i32 6, !"light_pos", i32 3, i32 96, i32 7, i32 9}
!18 = !{i32 6, !"light_color", i32 3, i32 112, i32 7, i32 9}
!19 = !{i32 1, void ()* @PSMain, !20}
!20 = !{!21}
!21 = !{i32 0, !22, !22}
!22 = !{}
!23 = !{[14 x i32] [i32 12, i32 4, i32 0, i32 0, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0]}
!24 = !{void ()* @PSMain, !"PSMain", !25, !4, null}
!25 = !{!26, !31, null}
!26 = !{!27, !29, !30}
!27 = !{i32 0, !"SV_Position", i8 9, i8 3, !28, i8 4, i32 1, i8 4, i32 0, i8 0, null}
!28 = !{i32 0}
!29 = !{i32 1, !"V", i8 9, i8 0, !28, i8 2, i32 1, i8 4, i32 1, i8 0, null}
!30 = !{i32 2, !"N", i8 9, i8 0, !28, i8 2, i32 1, i8 4, i32 2, i8 0, null}
!31 = !{!32}
!32 = !{i32 0, !"SV_Target", i8 9, i8 16, !28, i8 0, i32 1, i8 4, i32 0, i8 0, null}
